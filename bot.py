import asyncio
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from database import (
    SessionLocal,
    create_user_if_not_exists,
    get_user_by_telegram_id,
    get_categories_by_user,
    get_monthly_expense_report,
    get_monthly_income_report


)
from models import Category

from models import Expense, Category
from decimal import Decimal
from datetime import date
from datetime import datetime, time as dtime, timedelta


from database import add_income

# üîê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π Telegram Bot Token
API_TOKEN = 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"), KeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤")],
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"), KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")],
        [KeyboardButton(text="–û—Ç—á–µ—Ç")],
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
)

cancel_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)


expense_categories_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞")],
        [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞")],
        [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

income_categories_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞")],
        [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞")],
        [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class CategoryStates(StatesGroup):
    waiting_for_category_name = State()

class ExpenseStates(StatesGroup):
    waiting_for_category_choice = State()
    waiting_for_amount_and_description = State()

class IncomeStates(StatesGroup):
    waiting_for_income_category_choice = State()
    waiting_for_income_amount = State()


class ExpenseCategoryManageStates(StatesGroup):
    waiting_for_expense_category_name = State()
    waiting_for_expense_category_to_delete = State()
    waiting_for_expense_category_to_edit = State()  
    waiting_for_new_expense_category_name = State()  


class IncomeCategoryManageStates(StatesGroup):
    waiting_for_income_category_name = State()
    waiting_for_income_category_to_delete = State()
    waiting_for_income_category_to_edit = State()
    waiting_for_new_income_category_name = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def handle_start(message: Message):
    db = SessionLocal()
    try:
        user = create_user_if_not_exists(
            db=db,
            telegram_id=message.from_user.id,
            username=message.from_user.username
        )
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤. \n \t–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ –Ω–µ—ë —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏–µ —Ç—Ä–∞—Ç—ã!", reply_markup=main_menu)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    finally:
        db.close()



#--------------------------------------------------------------------------------------------–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤------------------------------------------------------------------------------------

@dp.message(F.text == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤")
async def handle_expense_categories(message: Message):
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        categories = db.query(Category).filter_by(user_id=user.id, type="expense").order_by(Category.name).all()

        if not categories:
            await message.answer("üóÇÔ∏è –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤.", reply_markup=expense_categories_menu)
        else:
            category_list = "\n".join(f"‚Ä¢ {c.name}" for c in categories)
            await message.answer(f"üóÇÔ∏è –¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:\n{category_list}", reply_markup=expense_categories_menu)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤.")
    finally:
        db.close()

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞")
async def add_expense_category_start(message: Message, state: FSMContext):
    await message.answer("üÜï –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=cancel_keyboard)
    await state.set_state(ExpenseCategoryManageStates.waiting_for_expense_category_name)


@dp.message(ExpenseCategoryManageStates.waiting_for_expense_category_name)
async def receive_expense_category_name(message: Message, state: FSMContext):
    if message.text.strip() == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        return

    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        category_name = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        existing = db.query(Category).filter_by(user_id=user.id, name=category_name, type="expense").first()
        if existing:
            await message.answer("‚ö†Ô∏è –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=expense_categories_menu)
        else:
            new_category = Category(user_id=user.id, name=category_name, type="expense")
            db.add(new_category)
            db.commit()
            await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞ \"{category_name}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=expense_categories_menu)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞.")
    finally:
        db.close()
        await state.clear()


@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞")
async def delete_expense_category_start(message: Message, state: FSMContext):
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        categories = db.query(Category).filter_by(user_id=user.id, type="expense").order_by(Category.name).all()

        if not categories:
            await message.answer("‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=expense_categories_menu)
            return

        # –ö–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        buttons = [KeyboardButton(text=cat.name) for cat in categories]
        buttons.append(KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"))
        row_width = 2
        rows = [buttons[i:i + row_width] for i in range(0, len(buttons), row_width)]
        delete_category_keyboard = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

        await message.answer("üóë –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:", reply_markup=delete_category_keyboard)
        await state.set_state(ExpenseCategoryManageStates.waiting_for_expense_category_to_delete)

    finally:
        db.close()


@dp.message(ExpenseCategoryManageStates.waiting_for_expense_category_to_delete)
async def delete_expense_category_confirm(message: Message, state: FSMContext):
    if message.text.strip() == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=expense_categories_menu)
        return

    db = SessionLocal()
    try:
        category_name = message.text.strip()
        user = get_user_by_telegram_id(db, message.from_user.id)

        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        category = db.query(Category).filter_by(user_id=user.id, name=category_name, type="expense").first()

        if not category:
            await message.answer("‚ùó –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=expense_categories_menu)
        else:
            db.delete(category)
            db.commit()
            await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞ \"{category_name}\" —É–¥–∞–ª–µ–Ω–∞!", reply_markup=expense_categories_menu)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞.")
    finally:
        db.close()
        await state.clear()

@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞")
async def edit_expense_category_start(message: Message, state: FSMContext):
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        categories = db.query(Category).filter_by(user_id=user.id, type="expense").order_by(Category.name).all()

        if not categories:
            await message.answer("‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=expense_categories_menu)
            return

        # –ö–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        buttons = [KeyboardButton(text=cat.name) for cat in categories]
        buttons.append(KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"))
        row_width = 2
        rows = [buttons[i:i + row_width] for i in range(0, len(buttons), row_width)]
        edit_category_keyboard = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

        await message.answer("‚úèÔ∏è –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=edit_category_keyboard)
        await state.set_state(ExpenseCategoryManageStates.waiting_for_expense_category_to_edit)

    finally:
        db.close()


@dp.message(ExpenseCategoryManageStates.waiting_for_expense_category_to_edit)
async def choose_expense_category_to_edit(message: Message, state: FSMContext):
    if message.text.strip() == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=expense_categories_menu)
        return

    await state.update_data(old_category_name=message.text.strip())
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=cancel_keyboard)
    await state.set_state(ExpenseCategoryManageStates.waiting_for_new_expense_category_name)


@dp.message(ExpenseCategoryManageStates.waiting_for_new_expense_category_name)
async def save_new_expense_category_name(message: Message, state: FSMContext):
    if message.text.strip() == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=expense_categories_menu)
        return

    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        data = await state.get_data()
        old_category_name = data.get("old_category_name")
        new_category_name = message.text.strip()

        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        category = db.query(Category).filter_by(user_id=user.id, name=old_category_name, type="expense").first()

        if not category:
            await message.answer("‚ùó –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=expense_categories_menu)
        else:
            category.name = new_category_name
            db.commit()
            await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ \"{new_category_name}\"!", reply_markup=expense_categories_menu)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞.")
    finally:
        db.close()
        await state.clear()

#------------------------------------------------------------------–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤---------------------------------------------------------------
@dp.message(F.text == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤")
async def handle_income_categories(message: Message):
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        categories = db.query(Category).filter_by(user_id=user.id, type="income").order_by(Category.name).all()

        if not categories:
            await message.answer("üóÇÔ∏è –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤.", reply_markup=income_categories_menu)
        else:
            category_list = "\n".join(f"‚Ä¢ {c.name}" for c in categories)
            await message.answer(f"üóÇÔ∏è –¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤:\n{category_list}", reply_markup=income_categories_menu)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤.")
    finally:
        db.close()

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞")
async def add_income_category_start(message: Message, state: FSMContext):
    await message.answer("üÜï –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞:", reply_markup=cancel_keyboard)
    await state.set_state(IncomeCategoryManageStates.waiting_for_income_category_name)


@dp.message(IncomeCategoryManageStates.waiting_for_income_category_name)
async def receive_income_category_name(message: Message, state: FSMContext):
    if message.text.strip() == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        return

    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        category_name = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
        existing = db.query(Category).filter_by(user_id=user.id, name=category_name, type="income").first()
        if existing:
            await message.answer("‚ö†Ô∏è –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=income_categories_menu)
        else:
            new_category = Category(user_id=user.id, name=category_name, type="income")
            db.add(new_category)
            db.commit()
            await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞ \"{category_name}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=income_categories_menu)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞.")
    finally:
        db.close()
        await state.clear()



@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞")
async def delete_income_category_start(message: Message, state: FSMContext):
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        categories = db.query(Category).filter_by(user_id=user.id, type="income").order_by(Category.name).all()

        if not categories:
            await message.answer("‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=income_categories_menu)
            return

        # –ö–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤
        buttons = [KeyboardButton(text=cat.name) for cat in categories]
        buttons.append(KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"))
        row_width = 2
        rows = [buttons[i:i + row_width] for i in range(0, len(buttons), row_width)]
        delete_income_category_keyboard = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

        await message.answer("üóë –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=delete_income_category_keyboard)
        await state.set_state(IncomeCategoryManageStates.waiting_for_income_category_to_delete)

    finally:
        db.close()

@dp.message(IncomeCategoryManageStates.waiting_for_income_category_to_delete)
async def delete_income_category_confirm(message: Message, state: FSMContext):
    if message.text.strip() == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=income_categories_menu)
        return

    db = SessionLocal()
    try:
        category_name = message.text.strip()
        user = get_user_by_telegram_id(db, message.from_user.id)

        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        category = db.query(Category).filter_by(user_id=user.id, name=category_name, type="income").first()

        if not category:
            await message.answer("‚ùó –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=income_categories_menu)
        else:
            db.delete(category)
            db.commit()
            await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞ \"{category_name}\" —É–¥–∞–ª–µ–Ω–∞!", reply_markup=income_categories_menu)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞.")
    finally:
        db.close()
        await state.clear()


@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞")
async def edit_income_category_start(message: Message, state: FSMContext):
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        categories = db.query(Category).filter_by(user_id=user.id, type="income").order_by(Category.name).all()

        if not categories:
            await message.answer("‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=income_categories_menu)
            return

        # –ö–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–æ—Ö–æ–¥–æ–≤
        buttons = [KeyboardButton(text=cat.name) for cat in categories]
        buttons.append(KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"))
        row_width = 2
        rows = [buttons[i:i + row_width] for i in range(0, len(buttons), row_width)]
        edit_income_category_keyboard = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

        await message.answer("‚úèÔ∏è –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=edit_income_category_keyboard)
        await state.set_state(IncomeCategoryManageStates.waiting_for_income_category_to_edit)

    finally:
        db.close()


@dp.message(IncomeCategoryManageStates.waiting_for_income_category_to_edit)
async def choose_income_category_to_edit(message: Message, state: FSMContext):
    if message.text.strip() == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=income_categories_menu)
        return

    await state.update_data(old_income_category_name=message.text.strip())
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞:", reply_markup=cancel_keyboard)
    await state.set_state(IncomeCategoryManageStates.waiting_for_new_income_category_name)


@dp.message(IncomeCategoryManageStates.waiting_for_new_income_category_name)
async def save_new_income_category_name(message: Message, state: FSMContext):
    if message.text.strip() == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=income_categories_menu)
        return

    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        data = await state.get_data()
        old_category_name = data.get("old_income_category_name")
        new_category_name = message.text.strip()

        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        category = db.query(Category).filter_by(user_id=user.id, name=old_category_name, type="income").first()

        if not category:
            await message.answer("‚ùó –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=income_categories_menu)
        else:
            category.name = new_category_name
            db.commit()
            await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ \"{new_category_name}\"!", reply_markup=income_categories_menu)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞.")
    finally:
        db.close()
        await state.clear()


#----------------------------------------------------------------–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞--------------------------------------------------

@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
async def handle_add_income(message: Message, state: FSMContext):
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start.")
            return

        categories = db.query(Category).filter_by(user_id=user.id, type="income").order_by(Category.name).all()

        if not categories:
            await message.answer("‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É.", reply_markup=main_menu)
            return

        # –ö–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–æ—Ö–æ–¥–æ–≤
        buttons = [KeyboardButton(text=cat.name) for cat in categories]
        buttons.append(KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"))
        row_width = 2
        rows = [buttons[i:i + row_width] for i in range(0, len(buttons), row_width)]
        income_category_keyboard = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

        await message.answer("üí∏ –ò–∑ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥?", reply_markup=income_category_keyboard)
        await state.set_state(IncomeStates.waiting_for_income_category_choice)

    finally:
        db.close()


@dp.message(IncomeStates.waiting_for_income_category_choice)
async def handle_income_category_chosen(message: Message, state: FSMContext):
    if message.text.strip() == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        return

    selected_category = message.text.strip()
    await state.update_data(selected_income_category=selected_category)

    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(IncomeStates.waiting_for_income_amount)



@dp.message(IncomeStates.waiting_for_income_amount)
async def handle_income_amount(message: Message, state: FSMContext):
    if message.text.strip() == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        return

    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start.")
            return

        data = await state.get_data()
        category_name = data.get("selected_income_category")

        category = db.query(Category).filter_by(user_id=user.id, name=category_name, type="income").first()

        if not category:
            await message.answer("‚ùó –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu)
            await state.clear()
            return

        try:
            amount = Decimal(message.text.strip().replace(",", "."))
        except:
            await message.answer("‚ùó –í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Å—É–º–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: `5000.00`")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Ö–æ–¥
        add_income(db, user_id=user.id, category_id=category.id, amount=amount)

        await message.answer(f"‚úÖ –î–æ—Ö–æ–¥ {amount}‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category_name}\" –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞.")
    finally:
        db.close()
        await state.clear()




#----------------------------------------------------------------–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞-------------------------------------------------


@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def handle_add_expense(message: Message, state: FSMContext):
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start.")
            return

        categories = db.query(Category).filter_by(user_id=user.id, type="expense").order_by(Category.name).all()
        if not categories:
            await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É.")
            return

        # –ö–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        buttons = [KeyboardButton(text=cat.name) for cat in categories]
        buttons.append(KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"))
        row_width = 2
        rows = [buttons[i:i + row_width] for i in range(0, len(buttons), row_width)]
        category_keyboard = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

        await message.answer("üí∏ –ò–∑ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç–∞?", reply_markup=category_keyboard)
        await state.set_state(ExpenseStates.waiting_for_category_choice)

    finally:
        db.close()

@dp.message(ExpenseStates.waiting_for_category_choice)
async def handle_category_chosen(message: Message, state: FSMContext):

    if message.text == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        return
    selected_category = message.text.strip()
    await state.update_data(selected_category=selected_category)

    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ExpenseStates.waiting_for_amount_and_description)

@dp.message(ExpenseStates.waiting_for_amount_and_description)
async def handle_amount_only(message: Message, state: FSMContext):
    if message.text == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        return
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start.")
            return

        data = await state.get_data()
        category_name = data.get("selected_category")

        # –ù–∞–π–¥—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = db.query(Category).filter_by(user_id=user.id, name=category_name, type="expense").first()
        if not category:
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        try:
            amount = Decimal(message.text.strip().replace(",", "."))
        except:
            await message.answer("‚ùó –í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Å—É–º–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: `450.50`")
            return

        expense = Expense(
            user_id=user.id,
            category_id=category.id,
            amount=amount,
            spent_at=date.today()
        )

        db.add(expense)
        db.commit()

        await message.answer(
            f"‚úÖ –†–∞—Å—Ö–æ–¥ {amount}‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category_name}\" –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=main_menu
        )

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    finally:
        db.close()
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(CategoryStates.waiting_for_category_name)
async def receive_category_name(message: Message, state: FSMContext):
    if message.text.strip() == "‚¨Ö –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        return

    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        category_name = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        existing = db.query(Category).filter_by(user_id=user.id, name=category_name).first()
        if existing:
            await message.answer("‚ö†Ô∏è –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            category = Category(user_id=user.id, name=category_name)
            db.add(category)
            db.commit()
            await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è \"{category_name}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    finally:
        db.close()
        await state.clear()



@dp.message(F.text == "–û—Ç—á–µ—Ç")
async def handle_report(message: Message):
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start.")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤
        try:
            expense_report = get_monthly_expense_report(db, user.id)
        except Exception as e:
            expense_report = []
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")

        try:
            income_report = get_monthly_income_report(db, user.id)
        except Exception as e:
            income_report = []
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–æ–≤: {e}")

        lines = []

        # –ë–ª–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
        if expense_report:
            total_expenses = sum([(row[1] or 0) for row in expense_report])
            lines.append(f"üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ {date.today():%B}:\n")
            for name, amount in expense_report:
                lines.append(f"‚Ä¢ {name}: {float(amount or 0):,.2f} ‚ÇΩ")
            lines.append(f"üí∞ –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {float(total_expenses):,.2f} ‚ÇΩ\n")
        else:
            lines.append("üì≠ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n")

        # –ë–ª–æ–∫ –¥–æ—Ö–æ–¥–æ–≤
        if income_report:
            total_incomes = sum([(row[1] or 0) for row in income_report])
            lines.append(f"üìà –î–æ—Ö–æ–¥—ã –∑–∞ {date.today():%B}:\n")
            for name, amount in income_report:
                lines.append(f"‚Ä¢ {name}: {float(amount or 0):,.2f} ‚ÇΩ")
            lines.append(f"üíµ –í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: {float(total_incomes):,.2f} ‚ÇΩ\n")
        else:
            lines.append("üì≠ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –¥–æ—Ö–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n")

        # –ë–∞–ª–∞–Ω—Å
        if expense_report or income_report:
            total_expenses = sum([(row[1] or 0) for row in expense_report]) if expense_report else 0
            total_incomes = sum([(row[1] or 0) for row in income_report]) if income_report else 0
            balance = total_incomes - total_expenses
            balance_sign = "‚ûï" if balance >= 0 else "‚ûñ"
            lines.append(f"üè¶ –ë–∞–ª–∞–Ω—Å –∑–∞ –º–µ—Å—è—Ü: {balance_sign} {abs(balance):,.2f} ‚ÇΩ")

        await message.answer("\n".join(lines))

    except Exception as e:
        logging.exception(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.")
    finally:
        db.close()




from aiogram.fsm.state import any_state

@dp.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥", any_state)
async def handle_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
