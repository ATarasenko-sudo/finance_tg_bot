import asyncio
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from database import (
    SessionLocal,
    create_user_if_not_exists,
    get_user_by_telegram_id,
    get_categories_by_user,
    get_monthly_expense_report

)
from models import Category

from models import Expense, Category
from decimal import Decimal
from datetime import date
from datetime import datetime, time as dtime, timedelta

# üîê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π Telegram Bot Token
API_TOKEN = ""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"), KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")],
        [KeyboardButton(text="–û—Ç—á–µ—Ç")],
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class CategoryStates(StatesGroup):
    waiting_for_category_name = State()

class ExpenseStates(StatesGroup):
    waiting_for_category_choice = State()
    waiting_for_amount_and_description = State()




async def send_daily_reminders():
    while True:
        now = datetime.now()
        target_time = datetime.combine(now.date(), dtime(20, 0))  # 20:00
        if now >= target_time:
            target_time += timedelta(days=1)

        # –°–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –¥–æ 20:00
        wait_seconds = (target_time - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        db = SessionLocal()
        try:
            users = db.query(get_user_by_telegram_id.__annotations__["db"].class_).all()
            for user in users:
                try:
                    await bot.send_message(
                        chat_id=user.telegram_id,
                        text="üí¨ –ù–µ –∑–∞–±—É–¥—å –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è!"
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
        finally:
            db.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def handle_start(message: Message):
    db = SessionLocal()
    try:
        user = create_user_if_not_exists(
            db=db,
            telegram_id=message.from_user.id,
            username=message.from_user.username
        )
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤.", reply_markup=main_menu)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    finally:
        db.close()


# –ö–Ω–æ–ø–∫–∞ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
@dp.message(F.text == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def handle_categories_button(message: Message):
    await handle_categories(message)


# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def handle_categories(message: Message):
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
            return

        categories = get_categories_by_user(db, user.id)
        if not categories:
            await message.answer("üóÇÔ∏è –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        else:
            category_list = "\n".join(f"‚Ä¢ {c.name}" for c in categories)
            await message.answer(f"üóÇÔ∏è –¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{category_list}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
    finally:
        db.close()


# –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def start_adding_category(message: Message, state: FSMContext):
    await message.answer("üÜï –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(CategoryStates.waiting_for_category_name)



@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def handle_add_expense(message: Message, state: FSMContext):
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start.")
            return

        categories = get_categories_by_user(db, user.id)
        if not categories:
            await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É.")
            return

        # –ö–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        buttons = [KeyboardButton(text=cat.name) for cat in categories]
        row_width = 2
        rows = [buttons[i:i + row_width] for i in range(0, len(buttons), row_width)]
        category_keyboard = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

        await message.answer("üí∏ –ò–∑ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç–∞?", reply_markup=category_keyboard)
        await state.set_state(ExpenseStates.waiting_for_category_choice)

    finally:
        db.close()

@dp.message(ExpenseStates.waiting_for_category_choice)
async def handle_category_chosen(message: Message, state: FSMContext):
    selected_category = message.text.strip()
    await state.update_data(selected_category=selected_category)

    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ExpenseStates.waiting_for_amount_and_description)

@dp.message(ExpenseStates.waiting_for_amount_and_description)
async def handle_amount_only(message: Message, state: FSMContext):
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start.")
            return

        data = await state.get_data()
        category_name = data.get("selected_category")

        # –ù–∞–π–¥—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = db.query(Category).filter_by(user_id=user.id, name=category_name).first()
        if not category:
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        try:
            amount = Decimal(message.text.strip().replace(",", "."))
        except:
            await message.answer("‚ùó –í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Å—É–º–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: `450.50`")
            return

        expense = Expense(
            user_id=user.id,
            category_id=category.id,
            amount=amount,
            spent_at=date.today()
        )

        db.add(expense)
        db.commit()

        await message.answer(
            f"‚úÖ –†–∞—Å—Ö–æ–¥ {amount}‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category_name}\" –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=main_menu
        )

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    finally:
        db.close()
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(CategoryStates.waiting_for_category_name)
async def receive_category_name(message: Message, state: FSMContext):
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        category_name = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        existing = db.query(Category).filter_by(user_id=user.id, name=category_name).first()
        if existing:
            await message.answer("‚ö†Ô∏è –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            category = Category(user_id=user.id, name=category_name)
            db.add(category)
            db.commit()
            await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è \"{category_name}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    finally:
        db.close()
        await state.clear()




@dp.message(F.text == "–û—Ç—á–µ—Ç")
async def handle_report(message: Message):
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start.")
            return

        report = get_monthly_expense_report(db, user.id)

        if not report:
            await message.answer("üì≠ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —É —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.")
            return

        total = sum([row[1] for row in report])
        lines = [f"üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ {date.today():%B}:\n"]
        for name, amount in report:
            lines.append(f"‚Ä¢ {name}: {float(amount):,.2f} ‚ÇΩ")
        lines.append(f"\nüí∞ –í—Å–µ–≥–æ: {float(total):,.2f} ‚ÇΩ")

        await message.answer("\n".join(lines))
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.")
    finally:
        db.close()



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    reminder_task = asyncio.create_task(send_daily_reminders())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
